initSidebarItems({"enum":[["CompatError","A compability shim for ensuring an error can represent [`hyper::Error`]"],["ReqwestClientDefaultError","Possible errors from [`ClientDefault::default_client_with_name`] for reqwest"],["SurfError","Possible errors from [`Client::req()`] when using the surf client"],["UreqError","Possible errors from [`Client::req()`] when using the ureq client"]],"fn":[["user_agent","Gives the User-Agent header value for a client annotated with an added `twitch_api` product"]],"static":[["TWITCH_API_USER_AGENT","The User-Agent `product` of this crate."]],"struct":[["Body","A stream of `Bytes`, used when receiving bodies."],["Bytes","A cheaply cloneable and sliceable chunk of contiguous memory."],["DummyHttpClient","A client that will never work, used to trick documentation tests"]],"trait":[["Client","A client that can do requests"],["ClientDefault","A specific client default for setting some sane defaults for API calls and oauth2 usage"],["RequestExt","Extension trait for [`Request`]"],["ResponseExt","Extension trait for [`Response`]"]],"type":[["BoxedFuture","A boxed future, mimics `futures::future::BoxFuture`"],["Request","The request type we’re expecting with body."],["Response","The response type we’re expecting with body"]]});